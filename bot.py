# bot.py
import logging
import pickle
import os
import io
import base64
import json
from datetime import datetime, timedelta, timezone
import pytz

import openai
from openai import ChatCompletion  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞–ø—Ä—è–º—É—é —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)

from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_TASK_TEXT = 0
ASK_TASK_DATE = 1
ASK_TASK_DURATION = 2
ASK_DONE_INDEX = 3
ASK_EVENT_TITLE = 4
ASK_EVENT_DATE = 5
ASK_EVENT_START = 6
ASK_EVENT_END = 7

SCOPES = [
    "https://www.googleapis.com/auth/calendar",
    "https://www.googleapis.com/auth/tasks",
]

MINSK_TZ = pytz.timezone("Europe/Minsk")
RUSSIAN_WEEKDAYS = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}

def format_russian_date(date_obj):
    weekday = RUSSIAN_WEEKDAYS[date_obj.strftime("%A")]
    return f"{weekday} ({date_obj.strftime('%d.%m')})"

def get_credentials():
    creds = None
    encoded_token = os.getenv("GOOGLE_TOKEN")
    if encoded_token:
        try:
            token_data = base64.b64decode(encoded_token)
            creds = pickle.load(io.BytesIO(token_data))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    if not creds:
        flow = InstalledAppFlow.from_client_config(
            eval(os.getenv("GOOGLE_CREDENTIALS")), SCOPES
        )
        creds = flow.run_local_server(port=0)
    return creds

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    service = build("tasks", "v1", credentials=creds)
    results = service.tasks().list(tasklist='@default', showCompleted=False).execute()
    items = results.get('items', [])

    if not items:
        await update.message.reply_text("üéâ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    grouped = {}
    for task in items:
        due = task.get('due')
        try:
            if due:
                due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(
                    tzinfo=timezone.utc
                ).astimezone(MINSK_TZ)
                key = due_dt.date()
            else:
                key = "–ë–µ–∑ –¥–∞—Ç—ã"
        except Exception:
            key = "–ë–µ–∑ –¥–∞—Ç—ã"

        grouped.setdefault(key, []).append(task)

    lines = ["üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:"]
    for key in sorted(grouped.keys()):
        if key == "–ë–µ–∑ –¥–∞—Ç—ã":
            lines.append("üìÖ –ë–µ–∑ –¥–∞—Ç—ã:")
        else:
            weekday = RUSSIAN_WEEKDAYS[datetime.combine(key, datetime.min.time()).strftime("%A")]
            lines.append(f"\nüìÖ {weekday} ({key.strftime('%d.%m')}):")

        for task in grouped[key]:
            line = f"‚Ä¢ {task['title']}"
            if task.get("notes"):
                line += f" ‚Äî {task['notes']}"
            lines.append(line)

    await update.message.reply_text("\n".join(lines))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üìù /addtask ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º  
üìã /listtasks ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á  
‚úÖ /done ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é  
üìÖ /addevent ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å  
üìÜ /today ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è  
‚è∞ /overdue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏  
ü§ñ /ai ‚Äî –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ  
‚ùå /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
"""
    keyboard = [["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"],
                ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", "üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É"],
                ["üìÜ –°–µ–≥–æ–¥–Ω—è", "‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"],
                ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(menu + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=reply_markup)

async def addtask_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return ASK_TASK_TEXT

async def received_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_title'] = update.message.text
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return ASK_TASK_DATE

async def received_task_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.strptime(update.message.text, "%d.%m.%Y")
        context.user_data['task_due'] = date.isoformat() + "Z"
        await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–∞—Å, 30 –º–∏–Ω—É—Ç)")
        return ASK_TASK_DURATION
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì")
        return ASK_TASK_DATE

async def received_task_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    duration = update.message.text
    creds = get_credentials()
    service = build("tasks", "v1", credentials=creds)
    task = {
        "title": context.user_data['task_title'],
        "due": context.user_data['task_due'],
        "notes": f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {duration}"
    }
    service.tasks().insert(tasklist='@default', body=task).execute()
    await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    return ConversationHandler.END

async def done_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    service = build("tasks", "v1", credentials=creds)
    result = service.tasks().list(tasklist='@default', showCompleted=False).execute()
    items = result.get('items', [])
    if not items:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return ConversationHandler.END
    context.user_data['tasks'] = items
    message = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å:\n"
    for idx, task in enumerate(items, 1):
        message += f"{idx}. {task['title']}\n"
    await update.message.reply_text(message)
    return ASK_DONE_INDEX

async def mark_selected_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        index = int(update.message.text) - 1
        items = context.user_data.get('tasks', [])
        if 0 <= index < len(items):
            task = items[index]
            task['status'] = 'completed'
            creds = get_credentials()
            service = build("tasks", "v1", credentials=creds)
            service.tasks().update(tasklist='@default', task=task['id'], body=task).execute()
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task['title']}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return ASK_DONE_INDEX
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return ASK_DONE_INDEX
    return ConversationHandler.END

async def today_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    now = datetime.now(MINSK_TZ)
    today_start = datetime(now.year, now.month, now.day, tzinfo=MINSK_TZ)
    today_end = today_start + timedelta(days=1)

    formatted_today = format_russian_date(today_start)
    lines = [f"üìÜ –°–µ–≥–æ–¥–Ω—è: {formatted_today}"]

    # –ó–∞–¥–∞—á–∏
    task_service = build("tasks", "v1", credentials=creds)
    result = task_service.tasks().list(tasklist='@default', showCompleted=False).execute()
    tasks = result.get('items', [])

    today_tasks_list = []
    for task in tasks:
        due = task.get("due")
        if due:
            try:
                due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(tzinfo=timezone.utc).astimezone(MINSK_TZ)
                if today_start <= due_dt < today_end:
                    line = f"‚Ä¢ {task['title']}"
                    if task.get("notes"):
                        line += f" ‚Äî {task['notes']}"
                    today_tasks_list.append(line)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")

    lines.append("\nüìù –ó–∞–¥–∞—á–∏:")
    lines.extend(today_tasks_list or ["–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."])

    # –í—Å—Ç—Ä–µ—á–∏
    calendar_service = build("calendar", "v3", credentials=creds)
    events_result = calendar_service.events().list(
        calendarId='primary',
        timeMin=today_start.isoformat(),
        timeMax=today_end.isoformat(),
        singleEvents=True,
        orderBy='startTime'
    ).execute()
    events = events_result.get('items', [])

    lines.append("\nüïí –í—Å—Ç—Ä–µ—á–∏:")
    if events:
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if 'T' in start:
                start_time = datetime.fromisoformat(start).astimezone(MINSK_TZ)
                lines.append(f"‚Ä¢ {summary} –≤ {start_time.strftime('%H:%M')}")
            else:
                lines.append(f"‚Ä¢ {summary}")
    else:
        lines.append("–ù–µ—Ç –≤—Å—Ç—Ä–µ—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

    await update.message.reply_text("\n".join(lines))


async def overdue_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    now = datetime.now(MINSK_TZ)
    service = build("tasks", "v1", credentials=creds)
    result = service.tasks().list(tasklist='@default', showCompleted=False).execute()
    tasks = result.get('items', [])

    grouped_tasks = {}

    for task in tasks:
        due = task.get("due")
        if due:
            try:
                due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(tzinfo=timezone.utc).astimezone(MINSK_TZ)
                if due_dt < now:
                    key = due_dt.date()
                    if key not in grouped_tasks:
                        grouped_tasks[key] = []
                    task_line = f"‚Ä¢ {task['title']}"
                    if task.get("notes"):
                        task_line += f" ‚Äî {task['notes']}"
                    grouped_tasks[key].append(task_line)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –≤ overdue: {e}")
                continue

    if not grouped_tasks:
        await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return

    lines = ["‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:"]
    for date in sorted(grouped_tasks.keys()):
        lines.append(f"\n{format_russian_date(datetime.combine(date, datetime.min.time()))}")
        lines.extend(grouped_tasks[date])

    await update.message.reply_text("\n".join(lines))


async def addevent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
    return ASK_EVENT_TITLE

async def received_event_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text:
        context.user_data['event_title'] = text
        await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return ASK_EVENT_DATE
    else:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return ASK_EVENT_TITLE

async def received_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        parsed_date = datetime.strptime(text, "%d.%m.%Y")
        context.user_data['event_date'] = parsed_date.strftime("%d.%m.%Y")
        await update.message.reply_text("üïí –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
        return ASK_EVENT_START
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì")
        return ASK_EVENT_DATE

async def received_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['event_start'] = update.message.text
    await update.message.reply_text("üïï –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30):")
    return ASK_EVENT_END

async def received_event_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        title = context.user_data['event_title']
        date = context.user_data['event_date']
        start_time = context.user_data['event_start']
        end_time = update.message.text

        start_dt = datetime.strptime(f"{date} {start_time}", "%d.%m.%Y %H:%M")
        end_dt = datetime.strptime(f"{date} {end_time}", "%d.%m.%Y %H:%M")

        event = {
            'summary': title,
            'start': {'dateTime': start_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': end_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'description': '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞'
        }

        creds = get_credentials()
        service = build("calendar", "v3", credentials=creds)
        service.events().insert(calendarId='primary', body=event).execute()

        await update.message.reply_text(f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    return ConversationHandler.END

# --- –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò-–∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ OpenRouter ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ò–ò
async def process_ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command_dict):
    command = command_dict.get("command")
    params = command_dict.get("params", {})

    if command == "addtask":
        title = params.get("title")
        date = params.get("date")
        duration = params.get("duration")
        if not title or not date or not duration:
            await update.message.reply_text("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
            return
        try:
            task_date = datetime.strptime(date, "%d.%m.%Y")
            due = task_date.isoformat() + "Z"
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        creds = get_credentials()
        service = build("tasks", "v1", credentials=creds)
        task = {
            "title": title,
            "due": due,
            "notes": f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {duration}"
        }
        service.tasks().insert(tasklist='@default', body=task).execute()
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –ò–ò!")
    elif command == "listtasks":
        return await list_tasks(update, context)
    elif command == "done":
        return await done_start(update, context)
    elif command == "addevent":
        title = params.get("title")
        date = params.get("date")
        start_time = params.get("start")
        end_time = params.get("end")
        if not title or not date or not start_time or not end_time:
            await update.message.reply_text("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return
        try:
            start_dt = datetime.strptime(f"{date} {start_time}", "%d.%m.%Y %H:%M")
            end_dt = datetime.strptime(f"{date} {end_time}", "%d.%m.%Y %H:%M")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return
        event = {
            'summary': title,
            'start': {'dateTime': start_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': end_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'description': '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ (–ò–ò)'
        }
        creds = get_credentials()
        service = build("calendar", "v3", credentials=creds)
        service.events().insert(calendarId='primary', body=event).execute()
        await update.message.reply_text(f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á–µ—Ä–µ–∑ –ò–ò!")
    elif command == "today":
        return await today_tasks(update, context)
    elif command == "overdue":
        return await overdue_tasks(update, context)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai —Å –≤—ã–∑–æ–≤–æ–º OpenRouter —á–µ—Ä–µ–∑ ChatCompletion
async def ai_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.replace("/ai", "").strip()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OpenRouter
    openai.api_key = "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"
    openai.api_base = "https://openrouter.ai/api/v1"
    
    try:
        response = ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –≤ —Ä–æ–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. "
                        "–ù–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—à—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. "
                        "–í—ã–≤–µ–¥–∏ JSON-–æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º 'command', –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: "
                        "'addtask', 'listtasks', 'done', 'addevent', 'today', 'overdue'. "
                        "–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–µ—Ä–µ–¥–∞–π –∏—Ö –≤ –ø–æ–ª–µ 'params'. "
                        "–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤—ã–≤–µ–¥–∏ 'unknown'. "
                        "–ü—Ä–∏–º–µ—Ä: {\"command\": \"addtask\", \"params\": {\"title\": \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–±\", \"date\": \"01.01.2025\", \"duration\": \"30 –º–∏–Ω—É—Ç\"}}"
                    )
                },
                {"role": "user", "content": user_input}
            ],
            temperature=0
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenRouter: {e}")
        return

    try:
        ai_message = response["choices"][0]["message"]["content"]
        command_dict = json.loads(ai_message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò: {e}")
        return

    await process_ai_command(update, context, command_dict)

def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addevent", addevent_start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("listtasks", list_tasks))
    app.add_handler(CommandHandler("today", today_tasks))
    app.add_handler(CommandHandler("overdue", overdue_tasks))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –ò–ò
    app.add_handler(CommandHandler("ai", ai_handler))

    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    app.add_handler(MessageHandler(filters.Regex(r"^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), list_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^üìÜ –°–µ–≥–æ–¥–Ω—è$"), today_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ$"), overdue_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), cancel))

    # ConversationHandler ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏ –∫–Ω–æ–ø–∫—É)
    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("addtask", addtask_start),
            MessageHandler(filters.Regex(r"^üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), addtask_start)
        ],
        states={
            ASK_TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_text)],
            ASK_TASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_date)],
            ASK_TASK_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_duration)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    # ConversationHandler ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏ –∫–Ω–æ–ø–∫—É)
    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("addevent", addevent_start),
            MessageHandler(filters.Regex(r"^üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É$"), addevent_start)
        ],
        states={
            ASK_EVENT_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_title)],
            ASK_EVENT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_date)],
            ASK_EVENT_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_start)],
            ASK_EVENT_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_end)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    # ConversationHandler ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏ –∫–Ω–æ–ø–∫—É)
    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("done", done_start),
            MessageHandler(filters.Regex(r"^‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É$"), done_start)
        ],
        states={
            ASK_DONE_INDEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, mark_selected_done)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()
