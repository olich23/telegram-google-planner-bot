# bot.py
import logging
import pickle
import os
import io
import base64
from datetime import datetime, timedelta, timezone
import pytz
import dateparser
import re
import calendar

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)

from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from dotenv import load_dotenv
from telegram.error import TelegramError

from natasha import (
    NewsEmbedding,
    Segmenter,
    MorphVocab,
    DatesExtractor
)

emb = NewsEmbedding()
morph_vocab = MorphVocab()
segmenter = Segmenter()

dates_extractor = DatesExtractor(morph_vocab)


load_dotenv()
logging.basicConfig(level=logging.INFO)

ASK_TASK_TEXT = 0
ASK_TASK_DATE = 1
ASK_TASK_DURATION = 2
ASK_DONE_INDEX = 3
ASK_EVENT_TITLE = 4
ASK_EVENT_DATE = 5
ASK_EVENT_START = 6
ASK_EVENT_END = 7

SCOPES = [
    "https://www.googleapis.com/auth/calendar",
    "https://www.googleapis.com/auth/tasks",
]

MINSK_TZ = pytz.timezone("Europe/Minsk")
RUSSIAN_WEEKDAYS = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}

def format_russian_date(date_obj):
    weekday = RUSSIAN_WEEKDAYS[date_obj.strftime("%A")]
    return f"{weekday} ({date_obj.strftime('%d.%m')})"

def get_credentials():
    creds = None
    encoded_token = os.getenv("GOOGLE_TOKEN")
    if encoded_token:
        try:
            token_data = base64.b64decode(encoded_token)
            creds = pickle.load(io.BytesIO(token_data))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    if not creds:
        flow = InstalledAppFlow.from_client_config(
            eval(os.getenv("GOOGLE_CREDENTIALS")), SCOPES
        )
        creds = flow.run_local_server(port=0)
    return creds

def extract_datetime_from_text(text: str):
    print("üî• extract_datetime_from_text –ó–ê–ü–£–°–¢–ò–õ–°–Ø")
    print(f"[DEBUG] üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–µ–∫—Å—Ç: {text}")
    now = datetime.now(MINSK_TZ)

    matches = list(dates_extractor(text))
    print(f"[DEBUG] –ù–∞—à—ë–ª {len(matches)} —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π —á–µ—Ä–µ–∑ Natasha")
    if matches:
        match = matches[0]
        date_fact = match.fact
        print(f"[DEBUG] Natasha —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∞: {date_fact}")
        if date_fact:
            year = date_fact.year or now.year
            month = date_fact.month or now.month
            day = date_fact.day or now.day
            hour = date_fact.hour or 9
            minute = date_fact.minute or 0
            return datetime(year, month, day, hour, minute, tzinfo=MINSK_TZ)

    print("[DEBUG] Natasha –Ω–µ —Å–ø—Ä–∞–≤–∏–ª–∞—Å—å, –ø—Ä–æ–±—É–µ–º dateparser...")

    text_lower = text.lower()
    candidates = re.findall(r"(–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–≤—Ç–æ—Ä–Ω–∏–∫|—Å—Ä–µ–¥–∞|—á–µ—Ç–≤–µ—Ä–≥|–ø—è—Ç–Ω–∏—Ü–∞|—Å—É–±–±–æ—Ç–∞|–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ|–∑–∞–≤—Ç—Ä–∞|—Å–µ–≥–æ–¥–Ω—è|–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞|\d{1,2}[:.]\d{2}|\d{1,2}[./]\d{1,2}(?:[./]\d{2,4})?)", text_lower)
    print(f"[DEBUG] –ù–∞–π–¥–µ–Ω–æ –∫–∞–Ω–¥–∏–¥–∞—Ç(–æ–≤) –Ω–∞ –¥–∞—Ç—É: {candidates}")

    # –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø–∞—Ä—ã –ø–æ–¥—Ä—è–¥ –∏ –ø—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å
    for i in range(len(candidates)):
        for j in range(i + 1, len(candidates)):
            combined = candidates[i] + " " + candidates[j]
            dp_result = dateparser.parse(combined, languages=['ru'], settings={
                "TIMEZONE": "Europe/Minsk",
                "TO_TIMEZONE": "Europe/Minsk",
                "RETURN_AS_TIMEZONE_AWARE": True
            })
            if dp_result:
                print(f"[DEBUG] dateparser —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –∏–∑ '{combined}': {dp_result}")
                return dp_result

    # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å ‚Äî –ø—Ä–æ–±—É–µ–º –ø–æ –æ—Ç–¥–µ–ª—å–Ω–æ—Å—Ç–∏
    for word in candidates:
        if word in ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–≤—Ç–æ—Ä–Ω–∏–∫", "—Å—Ä–µ–¥–∞", "—á–µ—Ç–≤–µ—Ä–≥", "–ø—è—Ç–Ω–∏—Ü–∞", "—Å—É–±–±–æ—Ç–∞", "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "–∑–∞–≤—Ç—Ä–∞", "—Å–µ–≥–æ–¥–Ω—è", "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞"]:
            fixed = f"–≤ {word}" if not word.startswith("–≤ ") else word
            dp_result = dateparser.parse(fixed, languages=['ru'], settings={
                "TIMEZONE": "Europe/Minsk",
                "TO_TIMEZONE": "Europe/Minsk",
                "RETURN_AS_TIMEZONE_AWARE": True
            })
            if dp_result:
                print(f"[DEBUG] –î–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π dateparser —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: {fixed} ‚Üí {dp_result}")
                return dp_result

    print("[DEBUG] –ù–∏ Natasha, –Ω–∏ dateparser –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ –¥–∞—Ç—É üò¢")
    return None


def parse_duration(duration_text):
    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ –∏ –º–∏–Ω—É—Ç
    duration_text = duration_text.lower()
    hours = minutes = 0

    # –ß–∏—Å–ª–∞ –ø—Ä–æ–ø–∏—Å—å—é
    word_to_number = {
        "–æ–¥–∏–Ω": 1, "–¥–≤–∞": 2, "—Ç—Ä–∏": 3, "—á–µ—Ç—ã—Ä–µ": 4, "–ø—è—Ç—å": 5,
        "—à–µ—Å—Ç—å": 6, "—Å–µ–º—å": 7, "–≤–æ—Å–µ–º—å": 8, "–¥–µ–≤—è—Ç—å": 9, "–¥–µ—Å—è—Ç—å": 10,
        "–ø–æ–ª—Ç–æ—Ä–∞": 1.5, "–ø–æ–ª": 0.5, "–ø–æ–ª—á–∞—Å–∞": 0.5
    }

    for word, value in word_to_number.items():
        if word in duration_text:
            if "—á–∞—Å" in duration_text:
                hours += value if isinstance(value, int) else int(value)
                if isinstance(value, float) and value < 1:
                    minutes += int(value * 60)
            elif "–º–∏–Ω—É—Ç" in duration_text or "–º–∏–Ω—É—Ç–∞" in duration_text:
                minutes += int(value * 60)

    # –¢–∞–∫–∂–µ –∏—â–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    hour_match = re.search(r"(\d+(?:[\.,]\d+)?)\s*—á–∞—Å", duration_text)
    minute_match = re.search(r"(\d+)\s*–º–∏–Ω—É—Ç", duration_text)

    if hour_match:
        hours += float(hour_match.group(1).replace(",", "."))

    if minute_match:
        minutes += int(minute_match.group(1))

    total_minutes = int(hours * 60 + minutes)
    return total_minutes

def weekday_to_date(word):
    weekdays = {
        "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫": 0,
        "–≤—Ç–æ—Ä–Ω–∏–∫": 1,
        "—Å—Ä–µ–¥–∞": 2,
        "—á–µ—Ç–≤–µ—Ä–≥": 3,
        "–ø—è—Ç–Ω–∏—Ü–∞": 4,
        "—Å—É–±–±–æ—Ç–∞": 5,
        "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ": 6
    }
    today = datetime.now(MINSK_TZ).date()
    target_weekday = weekdays.get(word.lower())
    if target_weekday is None:
        return None

    days_ahead = (target_weekday - today.weekday() + 7) % 7
    days_ahead = days_ahead or 7  # –ï—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—è—Ç–Ω–∏—Ü–∞ –∏ –ø–∏—à–µ–º "–ø—è—Ç–Ω–∏—Ü–∞", —Ç–æ —Å–ª–µ–¥—É—é—â–∞—è

    return datetime.combine(today + timedelta(days=days_ahead), datetime.min.time()).replace(tzinfo=MINSK_TZ)

def parse_duration(text):
    text = text.lower().strip()

    # –°–ª–æ–≤–µ—Å–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
    if text in ["—á–∞—Å", "1 —á–∞—Å", "–æ–¥–∏–Ω —á–∞—Å"]:
        return "1 —á–∞—Å"
    if text in ["–ø–æ–ª—á–∞—Å–∞", "–ø–æ–ª —á–∞—Å–∞"]:
        return "30 –º–∏–Ω—É—Ç"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ "1.5 —á–∞—Å–∞", "1,5 —á–∞—Å–∞"
    match = re.match(r"(\d+)[.,](\d+)\s*—á–∞—Å", text)
    if match:
        hours = int(match.group(1))
        minutes = int(round(float("0." + match.group(2)) * 60))
        return f"{hours} —á–∞—Å {minutes} –º–∏–Ω—É—Ç"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
    match = re.match(r"(\d+)\s*—á–∞—Å", text)
    if match:
        return f"{match.group(1)} —á–∞—Å"

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
    match = re.match(r"(\d+)\s*–º–∏–Ω", text)
    if match:
        return f"{match.group(1)} –º–∏–Ω—É—Ç"

    # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±–∞
    match = re.match(r"(?:(\d+)\s*—á–∞—Å[–∞–æ–≤]?)?\s*(?:(\d+)\s*–º–∏–Ω—É—Ç[—ã]?)?", text)
    if match:
        h = match.group(1)
        m = match.group(2)
        parts = []
        if h:
            parts.append(f"{h} —á–∞—Å")
        if m:
            parts.append(f"{m} –º–∏–Ω—É—Ç")
        return " ".join(parts)

    return text  # fallback ‚Äî –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    service = build("tasks", "v1", credentials=creds)
    results = service.tasks().list(tasklist='@default', showCompleted=False).execute()
    items = results.get('items', [])

    if not items:
        await update.message.reply_text("üéâ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    grouped = {}
    for task in items:
        due = task.get('due')
        try:
            if due:
                due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(
                    tzinfo=timezone.utc
                ).astimezone(MINSK_TZ)
                key = due_dt.date()
            else:
                key = "–ë–µ–∑ –¥–∞—Ç—ã"
        except Exception:
            key = "–ë–µ–∑ –¥–∞—Ç—ã"

        grouped.setdefault(key, []).append(task)

    lines = ["üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:"]
    for key in sorted(grouped.keys()):
        if key == "–ë–µ–∑ –¥–∞—Ç—ã":
            lines.append("üìÖ –ë–µ–∑ –¥–∞—Ç—ã:")
        else:
            weekday = RUSSIAN_WEEKDAYS[datetime.combine(key, datetime.min.time()).strftime("%A")]
            lines.append(f"\nüìÖ {weekday} ({key.strftime('%d.%m')}):")

        for task in grouped[key]:
            line = f"‚Ä¢ {task['title']}"
            if task.get("notes"):
                line += f" ‚Äî {task['notes']}"
            lines.append(line)

    await update.message.reply_text("\n".join(lines))


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu = """üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üìù /addtask ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
üìã /listtasks ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
‚úÖ /done ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
üìÖ /addevent ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å
üìÜ /today ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚è∞ /overdue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
‚ùå /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
"""
    keyboard = [["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"],
                ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", "üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É"],
                ["üìÜ –°–µ–≥–æ–¥–Ω—è", "‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"],
                ["‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(menu + "\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ:", reply_markup=reply_markup)

async def addtask_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return ASK_TASK_TEXT

async def received_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_title'] = update.message.text
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return ASK_TASK_DATE

async def received_task_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date = datetime.strptime(update.message.text, "%d.%m.%Y")
        context.user_data['task_due'] = date.isoformat() + "Z"
        await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–∞—Å, 30 –º–∏–Ω—É—Ç)")
        return ASK_TASK_DURATION
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì")
        return ASK_TASK_DATE

async def received_task_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    duration_raw = update.message.text
    duration_parsed = parse_duration(duration_raw)

    creds = get_credentials()
    service = build("tasks", "v1", credentials=creds)
    task = {
        "title": context.user_data['task_title'],
        "due": context.user_data['task_due'],
        "notes": f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {duration_parsed}"
    }
    service.tasks().insert(tasklist='@default', body=task).execute()
    await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\nüïí {duration_parsed}")
    return ConversationHandler.END


async def done_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    service = build("tasks", "v1", credentials=creds)
    result = service.tasks().list(tasklist='@default', showCompleted=False).execute()
    items = result.get('items', [])
    if not items:
        await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
        return ConversationHandler.END
    context.user_data['tasks'] = items
    message = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å:\n"
    for idx, task in enumerate(items, 1):
        message += f"{idx}. {task['title']}\n"
    await update.message.reply_text(message)
    return ASK_DONE_INDEX

async def mark_selected_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        index = int(update.message.text) - 1
        items = context.user_data.get('tasks', [])
        if 0 <= index < len(items):
            task = items[index]
            task['status'] = 'completed'
            creds = get_credentials()
            service = build("tasks", "v1", credentials=creds)
            service.tasks().update(tasklist='@default', task=task['id'], body=task).execute()
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task['title']}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return ASK_DONE_INDEX
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return ASK_DONE_INDEX
    return ConversationHandler.END

async def today_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    now = datetime.now(MINSK_TZ)
    today_start = datetime(now.year, now.month, now.day, tzinfo=MINSK_TZ)
    today_end = today_start + timedelta(days=1)

    # –§–æ—Ä–º–∞—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
    formatted_today = format_russian_date(today_start)
    lines = [f"üìÜ –°–µ–≥–æ–¥–Ω—è: {formatted_today}"]

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏
    task_service = build("tasks", "v1", credentials=creds)
    result = task_service.tasks().list(tasklist='@default', showCompleted=False).execute()
    tasks = result.get('items', [])

    today_tasks = []
    for task in tasks:
        due = task.get("due")
        if due:
            try:
                due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(tzinfo=timezone.utc).astimezone(MINSK_TZ)
                if today_start <= due_dt < today_end:
                    line = f"‚Ä¢ {task['title']}"
                    if task.get("notes"):
                        line += f" ‚Äî {task['notes']}"
                    today_tasks.append(line)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–¥–∞—á–∏: {e}")

    lines.append("\nüìù –ó–∞–¥–∞—á–∏:")
    lines.extend(today_tasks or ["–ù–µ—Ç –∑–∞–¥–∞—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è."])

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å—Ç—Ä–µ—á–∏
    calendar_service = build("calendar", "v3", credentials=creds)
    events_result = calendar_service.events().list(
        calendarId='primary',
        timeMin=today_start.isoformat(),
        timeMax=today_end.isoformat(),
        singleEvents=True,
        orderBy='startTime'
    ).execute()
    events = events_result.get('items', [])

    lines.append("\nüïí –í—Å—Ç—Ä–µ—á–∏:")
    if events:
        for event in events:
            start = event['start'].get('dateTime', event['start'].get('date'))
            summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            if 'T' in start:
                start_time = datetime.fromisoformat(start).astimezone(MINSK_TZ)
                lines.append(f"‚Ä¢ {summary} –≤ {start_time.strftime('%H:%M')}")
            else:
                lines.append(f"‚Ä¢ {summary}")
    else:
        lines.append("–ù–µ—Ç –≤—Å—Ç—Ä–µ—á –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

    await update.message.reply_text("\n".join(lines))



async def overdue_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    creds = get_credentials()
    now = datetime.now(MINSK_TZ)
    service = build("tasks", "v1", credentials=creds)
    result = service.tasks().list(tasklist='@default', showCompleted=False).execute()
    tasks = result.get('items', [])

    grouped_tasks = {}

    for task in tasks:
        due = task.get("due")
        if due:
            try:
                due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(tzinfo=timezone.utc).astimezone(MINSK_TZ)
                if due_dt < now:
                    key = due_dt.date()
                    if key not in grouped_tasks:
                        grouped_tasks[key] = []
                    task_line = f"‚Ä¢ {task['title']}"
                    if task.get("notes"):
                        task_line += f" ‚Äî {task['notes']}"
                    grouped_tasks[key].append(task_line)
            except Exception as e:
                logging.warning(f"–û—à–∏–±–∫–∞ –≤ overdue: {e}")
                continue

    if not grouped_tasks:
        await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
        return

    lines = ["‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:"]
    for date in sorted(grouped_tasks.keys()):
        lines.append(f"\n{format_russian_date(datetime.combine(date, datetime.min.time()))}")
        lines.extend(grouped_tasks[date])

    await update.message.reply_text("\n".join(lines))


async def addevent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üìå –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
    return ASK_EVENT_TITLE

async def received_event_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text:
        context.user_data['event_title'] = text
        await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return ASK_EVENT_DATE
    else:
        await update.message.reply_text("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –í–≤–µ–¥–∏ –µ—â—ë —Ä–∞–∑:")
        return ASK_EVENT_TITLE


async def received_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        parsed_date = datetime.strptime(text, "%d.%m.%Y")
        context.user_data['event_date'] = parsed_date.strftime("%d.%m.%Y")
        await update.message.reply_text("üïï –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30):")
        return ASK_EVENT_END  # ‚Üê –≤–æ—Ç —ç—Ç–æ –≤–∞–∂–Ω–æ!
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì")
        return ASK_EVENT_DATE

async def received_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['event_start'] = update.message.text
    await update.message.reply_text("üïï –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30):")
    return ASK_EVENT_END

async def received_event_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        title = context.user_data['event_title']
        date = context.user_data['event_date']
        start_time = context.user_data['event_start']
        end_time = update.message.text

        start_dt = datetime.strptime(f"{date} {start_time}", "%d.%m.%Y %H:%M")
        end_dt = datetime.strptime(f"{date} {end_time}", "%d.%m.%Y %H:%M")

        event = {
            'summary': title,
            'start': {'dateTime': start_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': end_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'description': '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞'
        }

        creds = get_credentials()
        service = build("calendar", "v3", credentials=creds)
        service.events().insert(calendarId='primary', body=event).execute()

        await update.message.reply_text(f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å!")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    return ConversationHandler.END

async def handle_free_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    lowered = text.lower()

    print(f"[DEBUG] handle_free_text –≤—ã–∑–≤–∞–Ω: {text}")

    # 1. –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏
    if 'task_title' in context.user_data and 'task_due' not in context.user_data:
        print("[DEBUG] –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –∑–∞–¥–∞—á–∏")
        dt = extract_datetime_from_text(text)
        if dt:
            context.user_data['task_due'] = dt.isoformat()
            await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–∞—Å, 30 –º–∏–Ω—É—Ç)")
            return ASK_TASK_DURATION
        else:
            await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞, 01.04.2025):")
            return ASK_TASK_DATE

    # 2. –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏
    if 'event_title' in context.user_data and 'event_date' not in context.user_data:
        print("[DEBUG] –í–Ω—É—Ç—Ä–∏ –±–ª–æ–∫–∞ –æ–∂–∏–¥–∞–Ω–∏—è –¥–∞—Ç—ã –¥–ª—è –≤—Å—Ç—Ä–µ—á–∏")
        dt = extract_datetime_from_text(text)
        if dt:
            context.user_data['event_date'] = dt.strftime("%d.%m.%Y")
            context.user_data['event_start'] = dt.strftime("%H:%M")
            await update.message.reply_text("üïï –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30):")
            return ASK_EVENT_END
        else:
            await update.message.reply_text("‚ùå –ù–µ –ø–æ–Ω—è–ª –¥–∞—Ç—É. –í–≤–µ–¥–∏ —Å–Ω–æ–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞, 01.04.2025):")
            return ASK_EVENT_DATE

    # 3.5. –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –≤—Å—ë –∫—Ä–æ–º–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ ‚Äî –æ–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è
    if all(key in context.user_data for key in ['event_title', 'event_date', 'event_start']) and 'event_end' not in context.user_data:
        print("[DEBUG] –û–∂–∏–¥–∞–µ–º –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏")
        context.user_data['event_end'] = text
        return await received_event_end(update, context)

    # 3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –Ω–∞–º–µ—Ä–µ–Ω–∏—è
    if any(kw in lowered for kw in ["–≤—Å—Ç—Ä–µ—á", "—Å–æ–∑–≤–æ–Ω", "–∑–≤–æ–Ω–æ–∫", "–≤—Å—Ç—Ä–µ—Ç"]):
        print("[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: –≤—Å—Ç—Ä–µ—á–∞")
        context.user_data['event_title'] = text
        dt = extract_datetime_from_text(text)
        if dt:
            context.user_data['event_date'] = dt.strftime("%d.%m.%Y")
            context.user_data['event_start'] = dt.strftime("%H:%M")
            await update.message.reply_text("üïï –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30):")
            return ASK_EVENT_END
        else:
            await update.message.reply_text("üìÖ –ö–æ–≥–¥–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞ –≤ 14:00):")
            return ASK_EVENT_DATE

    if any(kw in lowered for kw in ["–Ω—É–∂–Ω–æ", "–∑–∞–¥–∞—á–∞", "—Å–¥–µ–ª–∞—Ç—å", "–ø–ª–∞–Ω–∏—Ä—É—é"]):
        print("[DEBUG] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∞–º–µ—Ä–µ–Ω–∏–µ: –∑–∞–¥–∞—á–∞")
        context.user_data['task_title'] = text
        dt = extract_datetime_from_text(text)
        if dt:
            context.user_data['task_due'] = dt.isoformat()
            await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–∞—Å, 30 –º–∏–Ω—É—Ç)")
            return ASK_TASK_DURATION
        else:
            await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∑–∞–≤—Ç—Ä–∞, 01.04.2025):")
            return ASK_TASK_DATE

    print("[DEBUG] –ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ –Ω–∏ –≤—Å—Ç—Ä–µ—á–∞, –Ω–∏ –∑–∞–¥–∞—á–∞")
    await update.message.reply_text("ü§î –Ø –ø–æ–∫–∞ –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –∏–ª–∏ –∫–Ω–æ–ø–∫–∏.")
    return ConversationHandler.END


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE):
    logging.error(msg="Exception while handling update:", exc_info=context.error)


def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addevent", addevent_start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("listtasks", list_tasks))
    app.add_handler(CommandHandler("today", today_tasks))
    app.add_handler(CommandHandler("overdue", overdue_tasks))

    # –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    app.add_handler(MessageHandler(filters.Regex(r"^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), list_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^üìÜ –°–µ–≥–æ–¥–Ω—è$"), today_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ$"), overdue_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), cancel))

    app.add_handler(ConversationHandler(
        entry_points=[
            MessageHandler(filters.TEXT & ~filters.COMMAND, handle_free_text)
        ],
        states={
            ASK_TASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_date)],
            ASK_TASK_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_duration)],
            ASK_EVENT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_date)],
            ASK_EVENT_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_start)],
            ASK_EVENT_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_end)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))
    
    # ConversationHandler ‚Äî –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏ –∫–Ω–æ–ø–∫—É)
    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("addtask", addtask_start),
            MessageHandler(filters.Regex(r"^üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), addtask_start)
        ],
        states={
            ASK_TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_text)],
            ASK_TASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_date)],
            ASK_TASK_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_duration)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    # ConversationHandler ‚Äî –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏ –∫–Ω–æ–ø–∫—É)
    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("addevent", addevent_start),
            MessageHandler(filters.Regex(r"^üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É$"), addevent_start)
        ],
        states={
            ASK_EVENT_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_title)],
            ASK_EVENT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_date)],
            ASK_EVENT_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_start)],
            ASK_EVENT_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_end)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    # ConversationHandler ‚Äî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É (—á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É –∏ –∫–Ω–æ–ø–∫—É)
    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("done", done_start),
            MessageHandler(filters.Regex(r"^‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É$"), done_start)
        ],
        states={
            ASK_DONE_INDEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, mark_selected_done)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    )) 
    
    
    
    app.add_error_handler(error_handler)


    
    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()



if __name__ == "__main__":
    main()
