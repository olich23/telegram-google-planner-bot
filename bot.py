import logging
import pickle
import os
import io
import base64
import json
from datetime import datetime, timedelta, timezone
import pytz
import re
import telegram
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
load_dotenv()
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤
ASK_TASK_TEXT, ASK_TASK_DATE, ASK_TASK_DURATION = range(3)
ASK_DONE_INDEX = 0
ASK_EVENT_TITLE, ASK_EVENT_DATE, ASK_EVENT_START, ASK_EVENT_END = range(4)
ASK_AUTH_CODE = 10

SCOPES = [
    "https://www.googleapis.com/auth/calendar",
    "https://www.googleapis.com/auth/tasks",
]

MINSK_TZ = pytz.timezone("Europe/Minsk")

class AuthHandler:
    auth_code = None
    auth_url = None

    @classmethod
    async def get_auth_code(cls, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await update.message.reply_text(
            "üîê –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –ø–æ —Å—Å—ã–ª–∫–µ –∏ –≤–≤–µ–¥–∏—Ç–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –∫–æ–¥:\n"
            f"{cls.auth_url}\n\n"
            "–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥:"
        )
        return ASK_AUTH_CODE

    @classmethod
    async def receive_auth_code(cls, update: Update, context: ContextTypes.DEFAULT_TYPE):
        cls.auth_code = update.message.text
        await update.message.reply_text("‚úÖ –ö–æ–¥ –ø–æ–ª—É—á–µ–Ω! –ü—ã—Ç–∞—é—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è...")
        return ConversationHandler.END

def get_credentials():
    """–ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    encoded_token = os.getenv("GOOGLE_TOKEN")
    if not encoded_token:
        raise ValueError("GOOGLE_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    try:
        token_data = base64.b64decode(encoded_token)
        creds = pickle.load(io.BytesIO(token_data))
        if creds and creds.valid:
            return creds
        raise ValueError("–ù–µ–≤–∞–ª–∏–¥–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
        raise

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    menu = """
üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫. –í–æ—Ç —á—Ç–æ —è —É–º–µ—é:

üìù /addtask ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É —Å –¥–∞—Ç–æ–π –∏ –≤—Ä–µ–º–µ–Ω–µ–º
üìã /listtasks ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
‚úÖ /done ‚Äî –≤—ã–±—Ä–∞—Ç—å –∏ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
üìÖ /addevent ‚Äî –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Å—Ç—Ä–µ—á—É –≤ Google –ö–∞–ª–µ–Ω–¥–∞—Ä—å
üìÜ /today ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
‚è∞ /overdue ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
üîê /auth ‚Äî –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ Google (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
‚ùå /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â—É—é –æ–ø–µ—Ä–∞—Ü–∏—é
    """
    keyboard = [
        ["üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏"],
        ["‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É", "üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É"],
        ["üìÜ –°–µ–≥–æ–¥–Ω—è", "‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ"],
        ["üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(menu, reply_markup=reply_markup)
async def addtask_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üìù –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:")
    return ASK_TASK_TEXT

async def received_task_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['task_title'] = update.message.text
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")
    return ASK_TASK_DATE

async def received_task_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_str = update.message.text.strip()
        date = datetime.strptime(date_str, "%d.%m.%Y").date()
        context.user_data['task_due'] = datetime.combine(date, datetime.min.time()).isoformat() + "Z"
        await update.message.reply_text("‚è± –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ? (–Ω–∞–ø—Ä–∏–º–µ—Ä: 1 —á–∞—Å, 30 –º–∏–Ω—É—Ç)")
        return ASK_TASK_DURATION
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return ASK_TASK_DATE

async def received_task_duration(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        duration = update.message.text
        creds = get_credentials()
        service = build("tasks", "v1", credentials=creds)
        task = {
            "title": context.user_data['task_title'],
            "due": context.user_data['task_due'],
            "notes": f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {duration}"
        }
        service.tasks().insert(tasklist='@default', body=task).execute()
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    except HttpError as e:
        logger.error(f"Google API error: {e}")
        await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å Google Tasks. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    except Exception as e:
        logger.error(f"Unexpected error: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")
    finally:
        context.user_data.clear()
    return ConversationHandler.END

async def done_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        creds = get_credentials()
        service = build("tasks", "v1", credentials=creds)
        result = service.tasks().list(tasklist='@default', showCompleted=False).execute()
        items = result.get('items', [])
        
        if not items:
            await update.message.reply_text("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è.")
            return ConversationHandler.END
            
        context.user_data['tasks'] = items
        message = "–í—ã–±–µ—Ä–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –∑–∞–≤–µ—Ä—à–∏—Ç—å:\n"
        for idx, task in enumerate(items, 1):
            due = task.get('due', '')
            if due:
                try:
                    due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ")
                    due_str = due_dt.strftime("%d.%m.%Y")
                except:
                    due_str = due[:10]
                message += f"{idx}. {task['title']} (–¥–æ {due_str})\n"
            else:
                message += f"{idx}. {task['title']}\n"
                
        await update.message.reply_text(message)
        return ASK_DONE_INDEX
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ done_start: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return ConversationHandler.END

async def mark_selected_done(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        index = int(update.message.text) - 1
        items = context.user_data.get('tasks', [])
        
        if 0 <= index < len(items):
            task = items[index]
            task['status'] = 'completed'
            creds = get_credentials()
            service = build("tasks", "v1", credentials=creds)
            service.tasks().update(tasklist='@default', task=task['id'], body=task).execute()
            await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {task['title']}")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return ASK_DONE_INDEX
    except ValueError:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏.")
        return ASK_DONE_INDEX
    finally:
        context.user_data.clear()
    return ConversationHandler.END

async def today_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        creds = get_credentials()
        now = datetime.now(MINSK_TZ)
        today_str = now.date()

        service = build("tasks", "v1", credentials=creds)
        result = service.tasks().list(tasklist='@default', showCompleted=False).execute()
        tasks = result.get('items', [])

        today_list = []
        for task in tasks:
            due = task.get("due")
            if due:
                try:
                    due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(tzinfo=timezone.utc).astimezone(MINSK_TZ)
                    if due_dt.date() == today_str:
                        today_list.append(f"‚Ä¢ {task['title']} (–¥–æ {due_dt.strftime('%H:%M')})")
                except Exception:
                    try:
                        due_date = datetime.strptime(due[:10], "%Y-%m-%d").date()
                        if due_date == today_str:
                            today_list.append(f"‚Ä¢ {task['title']} (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã –∑–∞–¥–∞—á–∏: {e}")

        calendar_service = build("calendar", "v3", credentials=creds)
        events_result = calendar_service.events().list(
            calendarId='primary',
            timeMin=now.replace(hour=0, minute=0, second=0).isoformat(),
            timeMax=(now + timedelta(days=1)).replace(hour=0, minute=0, second=0).isoformat(),
            singleEvents=True,
            orderBy='startTime'
        ).execute()
        events = events_result.get('items', [])

        lines = ["üìÜ –ó–∞–¥–∞—á–∏ –∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:"]
        lines.extend(today_list if today_list else ["–ó–∞–¥–∞—á –Ω–µ—Ç"])

        if events:
            lines.append("\nüïí –í—Å—Ç—Ä–µ—á–∏:")
            for event in events:
                start = event['start'].get('dateTime', event['start'].get('date'))
                summary = event.get('summary', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
                if 'T' in start:
                    start_dt = datetime.fromisoformat(start).astimezone(MINSK_TZ)
                    lines.append(f"‚Ä¢ {summary} –≤ {start_dt.strftime('%H:%M')}")
                else:
                    lines.append(f"‚Ä¢ {summary} (–≤–µ—Å—å –¥–µ–Ω—å)")
        else:
            lines.append("\n–í—Å—Ç—Ä–µ—á –Ω–µ—Ç")

        await update.message.reply_text("\n".join(lines))
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ today_tasks: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def overdue_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        creds = get_credentials()
        now = datetime.now(MINSK_TZ)
        service = build("tasks", "v1", credentials=creds)
        result = service.tasks().list(tasklist='@default', showCompleted=False).execute()
        tasks = result.get('items', [])
        
        overdue = []
        for task in tasks:
            due = task.get("due")
            if due:
                try:
                    due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ").replace(tzinfo=timezone.utc).astimezone(MINSK_TZ)
                    if due_dt < now:
                        overdue.append(f"‚ùó {task['title']} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {due_dt.strftime('%d.%m.%Y %H:%M')})")
                except Exception:
                    try:
                        due_date = datetime.strptime(due[:10], "%Y-%m-%d").date()
                        if due_date < now.date():
                            overdue.append(f"‚ùó {task['title']} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ {due_date.strftime('%d.%m.%Y')})")
                    except Exception as e:
                        logger.warning(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç—ã: {e}")
                        continue

        if overdue:
            await update.message.reply_text("‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:\n" + "\n".join(overdue))
        else:
            await update.message.reply_text("‚úÖ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ overdue_tasks: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")

async def addevent_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    await update.message.reply_text("üìå –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å—Ç—Ä–µ—á–∏:")
    return ASK_EVENT_TITLE

async def received_event_title(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['event_title'] = update.message.text
    await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ –¥–∞—Ç—É –≤—Å—Ç—Ä–µ—á–∏ (–î–î.–ú–ú.–ì–ì–ì–ì):")
    return ASK_EVENT_DATE

async def received_event_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        date_str = update.message.text.strip()
        datetime.strptime(date_str, "%d.%m.%Y")  # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
        context.user_data['event_date'] = date_str
        await update.message.reply_text("üïí –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 14:30):")
        return ASK_EVENT_START
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–î–î.–ú–ú.–ì–ì–ì–ì):")
        return ASK_EVENT_DATE

async def received_event_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = update.message.text.strip()
        if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_str):
            raise ValueError
        context.user_data['event_start'] = time_str
        await update.message.reply_text("üïï –£–∫–∞–∂–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15:30):")
        return ASK_EVENT_END
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú):")
        return ASK_EVENT_START

async def received_event_end(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        time_str = update.message.text.strip()
        if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_str):
            raise ValueError

        title = context.user_data['event_title']
        date_str = context.user_data['event_date']
        start_time = context.user_data['event_start']
        end_time = time_str

        start_dt = datetime.strptime(f"{date_str} {start_time}", "%d.%m.%Y %H:%M")
        end_dt = datetime.strptime(f"{date_str} {end_time}", "%d.%m.%Y %H:%M")

        if end_dt <= start_dt:
            await update.message.reply_text("‚ùå –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞:")
            return ASK_EVENT_END

        event = {
            'summary': title,
            'start': {'dateTime': start_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': end_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'description': '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞'
        }

        creds = get_credentials()
        service = build("calendar", "v3", credentials=creds)
        service.events().insert(calendarId='primary', body=event).execute()

        await update.message.reply_text(f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–∞ {date_str} —Å {start_time} –¥–æ {end_time}!")
    except ValueError:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ (–ß–ß:–ú–ú):")
        return ASK_EVENT_END
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
    finally:
        context.user_data.clear()
    return ConversationHandler.END

async def list_tasks(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        creds = get_credentials()
        service = build("tasks", "v1", credentials=creds)
        results = service.tasks().list(tasklist='@default', showCompleted=False).execute()
        items = results.get('items', [])
        
        if not items:
            await update.message.reply_text("üéâ –£ —Ç–µ–±—è –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
            return
            
        message = "üìù –¢–≤–æ–∏ –∑–∞–¥–∞—á–∏:\n"
        for idx, task in enumerate(items, start=1):
            title = task['title']
            notes = task.get('notes', '')
            due = task.get('due', '')
            
            if due:
                try:
                    due_dt = datetime.strptime(due, "%Y-%m-%dT%H:%M:%S.%fZ")
                    due_str = due_dt.strftime("%d.%m.%Y %H:%M")
                except:
                    due_str = due[:10]
                message += f"{idx}. {title} (–¥–æ {due_str})"
            else:
                message += f"{idx}. {title}"
                
            if notes:
                message += f" ‚Äî {notes}"
            message += "\n"
            
        await update.message.reply_text(message)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ list_tasks: {e}")
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á.")

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {context.error}", exc_info=context.error)
    
    if isinstance(context.error, telegram.error.Conflict):
        logger.critical("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç: —É–∂–µ –∑–∞–ø—É—â–µ–Ω –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞!")
        os._exit(1)
    elif update:
        await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def setup_handlers(app):
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("today", today_tasks))
    app.add_handler(CommandHandler("overdue", overdue_tasks))
    app.add_handler(CommandHandler("listtasks", list_tasks))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.Regex(r"^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), list_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^üìÜ –°–µ–≥–æ–¥–Ω—è$"), today_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ$"), overdue_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), cancel))
    app.add_handler(MessageHandler(filters.Regex(r"^üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è$"), AuthHandler.get_auth_code))

    # Conversation Handlers
    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("addtask", addtask_start),
            MessageHandler(filters.Regex(r"^üìù –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É$"), addtask_start)
        ],
        states={
            ASK_TASK_TEXT: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_text)],
            ASK_TASK_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_date)],
            ASK_TASK_DURATION: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_task_duration)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("done", done_start),
            MessageHandler(filters.Regex(r"^‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É$"), done_start)
        ],
        states={
            ASK_DONE_INDEX: [MessageHandler(filters.TEXT & ~filters.COMMAND, mark_selected_done)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("addevent", addevent_start),
            MessageHandler(filters.Regex(r"^üìÖ –î–æ–±–∞–≤–∏—Ç—å –≤—Å—Ç—Ä–µ—á—É$"), addevent_start)
        ],
        states={
            ASK_EVENT_TITLE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_title)],
            ASK_EVENT_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_date)],
            ASK_EVENT_START: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_start)],
            ASK_EVENT_END: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_event_end)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
        allow_reentry=True
    ))

    app.add_handler(ConversationHandler(
        entry_points=[
            CommandHandler("auth", AuthHandler.get_auth_code),
            MessageHandler(filters.Regex(r"^üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è$"), AuthHandler.get_auth_code)
        ],
        states={
            ASK_AUTH_CODE: [MessageHandler(filters.TEXT & ~filters.COMMAND, AuthHandler.receive_auth_code)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    ))

    app.add_error_handler(error_handler)

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    required_vars = ['TELEGRAM_TOKEN', 'GOOGLE_CREDENTIALS', 'GOOGLE_TOKEN']
    missing_vars = [var for var in required_vars if not os.getenv(var)]
    if missing_vars:
        logger.critical(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {', '.join(missing_vars)}")
        return

    try:
        app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()
        setup_handlers(app)
        logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∫–æ–º–∞–Ω–¥—ã...")
        app.run_polling()
    except Exception as e:
        logger.critical(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        raise

if __name__ == "__main__":
    main()
