# –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π OpenRouter (OpenAI API) –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞
import logging
import pickle
import os
import io
import base64
import json
from datetime import datetime, timedelta, timezone
import pytz

import openai  # –ø—Ä–æ—Å—Ç–æ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º openai, –±–µ–∑ –∏–º–ø–æ—Ä—Ç–∞ ChatCompletion

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    MessageHandler, filters, ConversationHandler
)

from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from dotenv import load_dotenv

load_dotenv()
logging.basicConfig(level=logging.INFO)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
ASK_TASK_TEXT = 0
ASK_TASK_DATE = 1
ASK_TASK_DURATION = 2
ASK_DONE_INDEX = 3
ASK_EVENT_TITLE = 4
ASK_EVENT_DATE = 5
ASK_EVENT_START = 6
ASK_EVENT_END = 7

SCOPES = [
    "https://www.googleapis.com/auth/calendar",
    "https://www.googleapis.com/auth/tasks",
]

MINSK_TZ = pytz.timezone("Europe/Minsk")
RUSSIAN_WEEKDAYS = {
    'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
    'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
    'Wednesday': '–°—Ä–µ–¥–∞',
    'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
    'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
    'Saturday': '–°—É–±–±–æ—Ç–∞',
    'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ',
}

def format_russian_date(date_obj):
    weekday = RUSSIAN_WEEKDAYS[date_obj.strftime("%A")]
    return f"{weekday} ({date_obj.strftime('%d.%m')})"

def get_credentials():
    creds = None
    encoded_token = os.getenv("GOOGLE_TOKEN")
    if encoded_token:
        try:
            token_data = base64.b64decode(encoded_token)
            creds = pickle.load(io.BytesIO(token_data))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–æ–∫–µ–Ω–∞: {e}")
    if not creds:
        flow = InstalledAppFlow.from_client_config(
            eval(os.getenv("GOOGLE_CREDENTIALS")), SCOPES
        )
        creds = flow.run_local_server(port=0)
    return creds

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ (list_tasks, addtask_start, received_task_text –∏ —Ç.–¥.) –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π

# --- –ù–æ–≤—ã–π —Ä–∞–∑–¥–µ–ª: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ò–ò-–∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ OpenRouter ---

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã, –ø–æ–ª—É—á–µ–Ω–Ω–æ–π –æ—Ç –ò–ò
async def process_ai_command(update: Update, context: ContextTypes.DEFAULT_TYPE, command_dict):
    command = command_dict.get("command")
    params = command_dict.get("params", {})

    if command == "addtask":
        title = params.get("title")
        date = params.get("date")
        duration = params.get("duration")
        if not title or not date or not duration:
            await update.message.reply_text("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
            return
        try:
            task_date = datetime.strptime(date, "%d.%m.%Y")
            due = task_date.isoformat() + "Z"
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì")
            return
        creds = get_credentials()
        service = build("tasks", "v1", credentials=creds)
        task = {
            "title": title,
            "due": due,
            "notes": f"–ü–ª–∞–Ω–∏—Ä—É–µ–º–æ–µ –≤—Ä–µ–º—è: {duration}"
        }
        service.tasks().insert(tasklist='@default', body=task).execute()
        await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ –ò–ò!")
    elif command == "listtasks":
        from_task = await list_tasks(update, context)
        return from_task
    elif command == "done":
        return await done_start(update, context)
    elif command == "addevent":
        title = params.get("title")
        date = params.get("date")
        start_time = params.get("start")
        end_time = params.get("end")
        if not title or not date or not start_time or not end_time:
            await update.message.reply_text("‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å—Ç—Ä–µ—á–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã: –Ω–∞–∑–≤–∞–Ω–∏–µ, –¥–∞—Ç–∞, –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è.")
            return
        try:
            start_dt = datetime.strptime(f"{date} {start_time}", "%d.%m.%Y %H:%M")
            end_dt = datetime.strptime(f"{date} {end_time}", "%d.%m.%Y %H:%M")
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return
        event = {
            'summary': title,
            'start': {'dateTime': start_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'end': {'dateTime': end_dt.isoformat(), 'timeZone': 'Europe/Minsk'},
            'description': '–î–æ–±–∞–≤–ª–µ–Ω–æ —á–µ—Ä–µ–∑ Telegram-–±–æ—Ç–∞ (–ò–ò)'
        }
        creds = get_credentials()
        service = build("calendar", "v3", credentials=creds)
        service.events().insert(calendarId='primary', body=event).execute()
        await update.message.reply_text(f"‚úÖ –í—Å—Ç—Ä–µ—á–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å —á–µ—Ä–µ–∑ –ò–ò!")
    elif command == "today":
        return await today_tasks(update, context)
    elif command == "overdue":
        return await overdue_tasks(update, context)
    else:
        await update.message.reply_text("‚ùå –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ai —Å –≤—ã–∑–æ–≤–æ–º OpenRouter —á–µ—Ä–µ–∑ openai.ChatCompletion.create
async def ai_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text.replace("/ai", "").strip()
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã OpenRouter
    openai.api_key = "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"
    openai.api_base = "https://openrouter.ai/api/v1"
    
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –≤—ã—Å—Ç—É–ø–∞–µ—à—å –≤ —Ä–æ–ª–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è Telegram-–±–æ—Ç–∞-–ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞. "
                        "–ù–∞ –≤—Ö–æ–¥ –ø–æ–ª—É—á–∞–µ—à—å –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ. "
                        "–í—ã–≤–µ–¥–∏ JSON-–æ–±—ä–µ–∫—Ç —Å –ø–æ–ª–µ–º 'command', –∑–Ω–∞—á–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–¥–Ω–∏–º –∏–∑: "
                        "'addtask', 'listtasks', 'done', 'addevent', 'today', 'overdue'. "
                        "–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ —Ç—Ä–µ–±—É–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤, –ø–µ—Ä–µ–¥–∞–π –∏—Ö –≤ –ø–æ–ª–µ 'params'. "
                        "–ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞, –≤—ã–≤–µ–¥–∏ 'unknown'. "
                        "–ü—Ä–∏–º–µ—Ä: {\"command\": \"addtask\", \"params\": {\"title\": \"–ö—É–ø–∏—Ç—å —Ö–ª–µ–±\", \"date\": \"01.01.2025\", \"duration\": \"30 –º–∏–Ω—É—Ç\"}}"
                    )
                },
                {"role": "user", "content": user_input}
            ],
            temperature=0
        )
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ OpenRouter: {e}")
        return

    try:
        ai_message = response["choices"][0]["message"]["content"]
        command_dict = json.loads(ai_message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç –ò–ò: {e}")
        return

    await process_ai_command(update, context, command_dict)

def main():
    app = ApplicationBuilder().token(os.getenv("TELEGRAM_TOKEN")).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("addevent", addevent_start))
    app.add_handler(CommandHandler("cancel", cancel))
    app.add_handler(CommandHandler("listtasks", list_tasks))
    app.add_handler(CommandHandler("today", today_tasks))
    app.add_handler(CommandHandler("overdue", overdue_tasks))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ –ò–ò
    app.add_handler(CommandHandler("ai", ai_handler))

    # –ü—Ä–∏–º–µ—Ä –∫–Ω–æ–ø–æ–∫ –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
    app.add_handler(MessageHandler(filters.Regex(r"^üìã –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–¥–∞—á–∏$"), list_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^üìÜ –°–µ–≥–æ–¥–Ω—è$"), today_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚è∞ –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ$"), overdue_tasks))
    app.add_handler(MessageHandler(filters.Regex(r"^‚ùå –û—Ç–º–µ–Ω–∏—Ç—å$"), cancel))

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º ConversationHandler-—ã –¥–ª—è –∑–∞–¥–∞—á –∏ –≤—Å—Ç—Ä–µ—á
    # (—Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∫–æ–¥–∞ –¥–ª—è ConversationHandler-–æ–≤ –Ω–µ –∏–∑–º–µ–Ω—è–ª–∏—Å—å)

    print("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ñ–¥—É –∫–æ–º–∞–Ω–¥—ã...")
    app.run_polling()

if __name__ == "__main__":
    main()
